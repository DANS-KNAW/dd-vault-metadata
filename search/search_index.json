{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dd-vault-metadata \u00b6 Dataverse workflow step for setting DANS Data Vault metadata. Purpose \u00b6 This service implements a PrePublishDataset workflow step that sets DANS Data Vault metadata on the dataset-version about to be published. Interfaces \u00b6 This service has the following interfaces: Provided interfaces \u00b6 Step invocation API \u00b6 Protocol type : HTTP Internal or external : internal Purpose : invoked by Dataverse when the PrePublishDataset workflow is executed Admin console \u00b6 Protocol type : HTTP Internal or external : internal Purpose : application monitoring and management Consumed interfaces \u00b6 Dataverse edit metadata API \u00b6 Protocol type : HTTP Internal or external : internal Purpose : to set the DANS Data Vault metadata fields on the dataset-version Processing \u00b6 The following fields in the block dansDataVaultMetadata are set by this service: typeName value source V1.0 value source Vn, n > 1.0 dansDataversePid the dataset DOI the dataset DOI dansDataversePidVersion the dataset version number the dataset version number dansBagId a urn:uuid generated by this service a urn:uuid generated by this service dansNbn a urn:nbn generated by this service the urn:nbn minted for V1.0","title":"Description"},{"location":"#dd-vault-metadata","text":"Dataverse workflow step for setting DANS Data Vault metadata.","title":"dd-vault-metadata"},{"location":"#purpose","text":"This service implements a PrePublishDataset workflow step that sets DANS Data Vault metadata on the dataset-version about to be published.","title":"Purpose"},{"location":"#interfaces","text":"This service has the following interfaces:","title":"Interfaces"},{"location":"#provided-interfaces","text":"","title":"Provided interfaces"},{"location":"#step-invocation-api","text":"Protocol type : HTTP Internal or external : internal Purpose : invoked by Dataverse when the PrePublishDataset workflow is executed","title":"Step invocation API"},{"location":"#admin-console","text":"Protocol type : HTTP Internal or external : internal Purpose : application monitoring and management","title":"Admin console"},{"location":"#consumed-interfaces","text":"","title":"Consumed interfaces"},{"location":"#dataverse-edit-metadata-api","text":"Protocol type : HTTP Internal or external : internal Purpose : to set the DANS Data Vault metadata fields on the dataset-version","title":"Dataverse edit metadata API"},{"location":"#processing","text":"The following fields in the block dansDataVaultMetadata are set by this service: typeName value source V1.0 value source Vn, n > 1.0 dansDataversePid the dataset DOI the dataset DOI dansDataversePidVersion the dataset version number the dataset version number dansBagId a urn:uuid generated by this service a urn:uuid generated by this service dansNbn a urn:nbn generated by this service the urn:nbn minted for V1.0","title":"Processing"},{"location":"config/","text":"Configuration \u00b6 This module can be configured by editing the configuration file. This file is installed in /etc/opt/dans.knaw.nl/dd-vault-metadata/config.yml when using the RPM. The settings are explained with comments in the file itself. An on-line version of the latest configuration file can be found here . Dataverse configuration \u00b6 To configure Dataverse to call this service, you must add it as an http/authext workflow step to the default PrePublishDataset workflow. The JSON to use in the step is included in INSTALL_DIR/install/workflow-step.json .","title":"Configuration"},{"location":"config/#configuration","text":"This module can be configured by editing the configuration file. This file is installed in /etc/opt/dans.knaw.nl/dd-vault-metadata/config.yml when using the RPM. The settings are explained with comments in the file itself. An on-line version of the latest configuration file can be found here .","title":"Configuration"},{"location":"config/#dataverse-configuration","text":"To configure Dataverse to call this service, you must add it as an http/authext workflow step to the default PrePublishDataset workflow. The JSON to use in the step is included in INSTALL_DIR/install/workflow-step.json .","title":"Dataverse configuration"},{"location":"context/","text":"Context \u00b6 This module is a component in the DANS Data Station Architecture .","title":"Context"},{"location":"context/#context","text":"This module is a component in the DANS Data Station Architecture .","title":"Context"},{"location":"dev/","text":"Development \u00b6 General information about developing DANS modules can be found here .","title":"Overview"},{"location":"dev/#development","text":"General information about developing DANS modules can be found here .","title":"Development"},{"location":"installation/","text":"Installation \u00b6 Currently, this project is built as an RPM package for RHEL8 and later. The RPM will install the binaries to /opt/dans.knaw.nl/dd-vault-metadata and the configuration files to /etc/opt/dans.knaw.nl/dd-vault-metadata . For installation on systems that do no support RPM and/or systemd: Build the tarball (see next section). Extract it to some location on your system, for example /opt/dans.knaw.nl/dd-vault-metadata . Start the service with the following command /opt/dans.knaw.nl/dd-vault-metadata/bin/dd-vault-metadata server /opt/dans.knaw.nl/dd-vault-metadata/cfg/config.yml Building from source \u00b6 Prerequisites: Java 17 or higher Maven 3.3.3 or higher RPM (optional, only if you want to build the RPM package) Steps: git clone https://github.com/DANS-KNAW/dd-vault-metadata.git cd dd-vault-metadata mvn clean install If the rpm executable is found at /usr/local/bin/rpm , the build profile that includes the RPM packaging will be activated. If rpm is available, but at a different path, then activate it by using Maven's -P switch: mvn -Pprm install . Alternatively, to build the tarball execute: mvn clean install assembly:single","title":"Installation"},{"location":"installation/#installation","text":"Currently, this project is built as an RPM package for RHEL8 and later. The RPM will install the binaries to /opt/dans.knaw.nl/dd-vault-metadata and the configuration files to /etc/opt/dans.knaw.nl/dd-vault-metadata . For installation on systems that do no support RPM and/or systemd: Build the tarball (see next section). Extract it to some location on your system, for example /opt/dans.knaw.nl/dd-vault-metadata . Start the service with the following command /opt/dans.knaw.nl/dd-vault-metadata/bin/dd-vault-metadata server /opt/dans.knaw.nl/dd-vault-metadata/cfg/config.yml","title":"Installation"},{"location":"installation/#building-from-source","text":"Prerequisites: Java 17 or higher Maven 3.3.3 or higher RPM (optional, only if you want to build the RPM package) Steps: git clone https://github.com/DANS-KNAW/dd-vault-metadata.git cd dd-vault-metadata mvn clean install If the rpm executable is found at /usr/local/bin/rpm , the build profile that includes the RPM packaging will be activated. If rpm is available, but at a different path, then activate it by using Maven's -P switch: mvn -Pprm install . Alternatively, to build the tarball execute: mvn clean install assembly:single","title":"Building from source"},{"location":"to-api/","text":"The API is defined in dd-vault-metadata-api . The version implemented by this service can be viewed in Swagger UI in a new tab: API .","title":"API"}]}